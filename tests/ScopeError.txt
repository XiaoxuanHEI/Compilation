class Point(var x: Integer, var y: Integer, var name: String) is
{
  var hasClone : Integer;   /* attributs supplementaires */

  /* la valeur du champ ci-dessous est indefinie si hasClone vaut 0.
   * Le probleme est qu'on n'a pas l'equivalent de NULL (du bon type)
   * dans le langage. On ne peut pas utiliser un 'object' pour cela car
   * un objet n'a pas de type defini. Ici on veut pouvoir connaitre le
   * dernier clone d'un meme objet.
  */
  var clone : Point;

  /* L'en-tete du constructeur doit etre identique a celui de la classe.
   * Les parametres précédés de var correspondent implictement à des attributs
   * de meme nom qui seront intialises automatiquement à la valeur du
   * parametre, comme si on avait la ligne suivante en tete du constructeur:
   *  this.x := x; this.y := y; this.nam := name;
   */

  def Point(var x: Integer, var y: Integer, var name: String) is
     { CptPoint.incr(); this.hasClone := 0; }

  def setName(s: String) is { this.name := s; }

  def getx() : Integer := this.x      /* pas de this implicite */

  def gety() : Integer := this.y

  def cloned() : Integer := this.hasClone <> 0

  def move(dx: Integer, dy: Integer, verbose: Integer) : Point is {
      this.x := this.x + dx; this.y := this.y + dy;
      if verbose then { this.print(verbose); } else {}
      /* pseudio variable 'result' dans laquelle, par convention, on laisse
       * la valeur de retour d'une fonction qui a un type de retour.
       */
      result := this;
  }

  def print(verbose : Integer) is {
      if verbose then "Inside Point::print".println(); else { }
      /* Exemples avec l'operateur & de concatenation de chaines */
      this.name.print();
      ( "= (" & this.x.toString() & ", " & this.y.toString() & ")" ).println();
  }

  /* par defaut, on ajoute un ' au nom de l'objet. On pourra le changer
   * apres coup avec setName si on veut
   */
  def clone() : Point is
  { 
    /* On memorise le dernier clone construit à partir de cet objet
     * si on voulait on pourrait ller le chainer a la fin de la liste des clones
    */
    this.clone := new Point(this.x, this.y, this.name & "'");
    this.hasClone := 1;
    result := this.clone;
  }

  /* imprime un objet et ses clones, s'ils existent */
  def allClones () is {
    this.print(0);
    if this.hasClone <> 0 then { this.clone.allClones(); } else { }
  }

  def egal(p: Point) : Integer is {
   /* Ils sont egaux s'ils ont memes coordonnees
    * On n'a pas de booleen donc on se sert des entiers, comme en C.
   */
       b1 : Integer := p.x - this.x;
       b2 : Integer := p.y - this.y;
       is
       if b1 then result := 0; else result := b2 = 0;
  }

  def egal2(p: Point) : Integer is {  /* autre version */
    b1 : Integer := p.x - this.x;
    b2: Integer;
    is
    result := 0;
    if b1 then { return; } else { }
       b2 := p.y - this.y;
       result := b2 = 0;
  }
}

{
	e: Point := new Point(1,2,"TEST");
	is
	e:=f;	/* f pas def ici */
	
}
